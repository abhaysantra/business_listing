# Generated by Django 3.0.5 on 2020-04-12 03:21

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='MyUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('user_type_id', models.IntegerField(null=True)),
                ('is_individual_vendor', models.IntegerField(default=0)),
                ('phone_number', models.CharField(max_length=255, null=True)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('modified_date', models.DateField(null=True)),
                ('uuid_code', models.CharField(blank=True, default=uuid.uuid4, max_length=100, unique=True)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='adminEmail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('receive_email', models.CharField(max_length=255)),
                ('from_email', models.CharField(max_length=255)),
            ],
        ),
        migrations.CreateModel(
            name='Book',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=255)),
                ('author', models.CharField(max_length=255)),
                ('pdf', models.FileField(upload_to='Books/pdf/')),
                ('cover', models.ImageField(blank=True, null=True, upload_to='Books/cover/')),
            ],
        ),
        migrations.CreateModel(
            name='Cities',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('city_id', models.IntegerField(null=True)),
                ('name', models.CharField(max_length=255, null=True)),
                ('state_id', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Countries',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country_id', models.IntegerField(null=True)),
                ('sortname', models.CharField(max_length=255, null=True)),
                ('name', models.CharField(max_length=250, null=True)),
                ('phonecode', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Parlour',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=255, null=True)),
                ('phone_number', models.CharField(max_length=255, null=True)),
                ('address', models.CharField(max_length=255, null=True)),
                ('landmark', models.CharField(max_length=255, null=True)),
                ('country', models.IntegerField(null=True)),
                ('state', models.IntegerField(null=True)),
                ('city', models.IntegerField(null=True)),
                ('pincode', models.CharField(max_length=255, null=True)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='parlour/profile/')),
                ('status', models.CharField(default='active', max_length=10)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('created_by', models.IntegerField(null=True)),
                ('modified_date', models.DateField(null=True)),
                ('modified_by', models.IntegerField(null=True)),
                ('uuid_code', models.CharField(blank=True, default=uuid.uuid4, max_length=100, unique=True)),
                ('agent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='agent', to=settings.AUTH_USER_MODEL)),
                ('vendor', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='vendor', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='States',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('state_id', models.IntegerField(null=True)),
                ('name', models.CharField(max_length=255, null=True)),
                ('country_id', models.IntegerField(null=True)),
            ],
        ),
        migrations.CreateModel(
            name='VendorList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('vendor_id', models.IntegerField(null=True)),
                ('agent', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='VendorInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('info', models.TextField(null=True)),
                ('service', models.TextField(null=True)),
                ('myuser', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ParlourService',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('service_name', models.CharField(max_length=255, null=True)),
                ('service_duration', models.CharField(max_length=255, null=True)),
                ('service_price', models.FloatField(default=0.0, null=True)),
                ('service_material', models.TextField(null=True)),
                ('status', models.CharField(default='active', max_length=10)),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('modified_date', models.DateField(null=True)),
                ('uuid_code', models.CharField(blank=True, default=uuid.uuid4, max_length=100, unique=True)),
                ('parlour', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='parlour', to='backend.Parlour')),
            ],
        ),
        migrations.CreateModel(
            name='MyUserProfile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('country', models.IntegerField(null=True)),
                ('state', models.IntegerField(null=True)),
                ('city', models.IntegerField(null=True)),
                ('landmark', models.CharField(max_length=255, null=True)),
                ('address', models.CharField(max_length=255, null=True)),
                ('pincode', models.CharField(max_length=255, null=True)),
                ('picture', models.ImageField(blank=True, null=True, upload_to='profile/')),
                ('created_date', models.DateField(auto_now_add=True, null=True)),
                ('modified_date', models.DateField(null=True)),
                ('user', models.OneToOneField(null=True, on_delete=django.db.models.deletion.CASCADE, to=settings.AUTH_USER_MODEL)),
            ],
        ),
    ]
